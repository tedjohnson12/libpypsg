
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_exocam.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_exocam.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_exocam.py:


Work with an ExoCAM GCM
=======================

Learn how to use the ``libpypsg.globes`` ExoCAM module. 


To get started, install ``libpypsg``:

.. code-block:: bash

    pip install libpypsg

It would also be beneficial to have PSG installed with docker.

.. GENERATED FROM PYTHON SOURCE LINES 16-33

.. code-block:: Python


    from pathlib import Path
    from netCDF4 import Dataset
    from cartopy import crs as ccrs
    from astropy import units as u
    import matplotlib.pyplot as plt
    from libpypsg.globes.exocam import exocam_to_pygcm, download_exocam_test_data
    from libpypsg import PyConfig, APICall
    from libpypsg.cfg import models
    from libpypsg.docker import set_url_and_run
    from libpypsg.units import resolving_power

    TEST_PATH = download_exocam_test_data(rewrite=False) # Change this to the path of your dataset

    set_url_and_run() # this will run PSG if it is installed. Otherwise it will change your url setting to `psg.gsfc.nasa.gov`.






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Saved settings to /home/runner/.libpypsg/settings.json
    Reloading settings...




.. GENERATED FROM PYTHON SOURCE LINES 34-36

Read the file
-------------

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: Python


    data = Dataset(TEST_PATH) # remember to close later.








.. GENERATED FROM PYTHON SOURCE LINES 40-42

Convert to PyGCM
----------------

.. GENERATED FROM PYTHON SOURCE LINES 42-58

.. code-block:: Python


    gcm = exocam_to_pygcm(
        data=data,                  # the GCM dataset
        itime=0,                    # the time index
        molecules=['H2O'],          # the molecule names
        aerosols=['Water'],         # the aerosol names
        background='N2',            # the background gas
        lon_start=0.,               # the longitude of the first pixel, optional
        lat_start=-90.,             # the latitude of the first pixel, optional (probably should never change)
        mean_molecular_mass=28.     # the mean molecular mass of the atmosphere. This is necessary if you have water.
    )

    data.close()

    print(type(gcm))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/libpypsg/globes/waccm/waccm.py:356: VariableAssumptionWarning: Emissivity not explicitly stated. Using 1.0.
      warnings.warn(msg, structure.VariableAssumptionWarning)
    <class 'libpypsg.globes.globes.PyGCM'>




.. GENERATED FROM PYTHON SOURCE LINES 59-62

Have some fun with the GCM
--------------------------


.. GENERATED FROM PYTHON SOURCE LINES 62-72

.. code-block:: Python

    proj = ccrs.Mollweide(
                    central_longitude=180)
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1, projection=proj)
    lats = gcm.lats
    lons = gcm.lons
    temperature = gcm.tsurf.dat.to_value(u.K).T
    im = ax.pcolormesh(lons, lats, temperature, transform=ccrs.PlateCarree(),cmap='viridis')
    fig.colorbar(im,ax=ax,label='T (K)',orientation='vertical')




.. image-sg:: /auto_examples/images/sphx_glr_plot_exocam_001.png
   :alt: plot exocam
   :srcset: /auto_examples/images/sphx_glr_plot_exocam_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.colorbar.Colorbar object at 0x7fc6a4445f10>



.. GENERATED FROM PYTHON SOURCE LINES 73-78

Set some other parameters
-------------------------

You can also read in a file and only change the ones you are interested in.
This is just a very comprehensive example.

.. GENERATED FROM PYTHON SOURCE LINES 78-137

.. code-block:: Python


    target = models.Target( # Most of these fields are optional
        object='Exoplanet',
        name='Proxima Cen b',
        diameter=2*u.R_earth,
        gravity=1*u.M_earth,
        star_distance=0.04856*u.au,
        star_velocity=0.00124*u.km/u.s,
        solar_longitude=0.*u.deg,
        solar_latitude=0.*u.deg,
        season=90*u.deg,
        star_temperature=2900.0*u.K,
        star_type='M',
        star_radius=0.14*u.R_sun,
        star_metallicity=0.0,
        obs_longitude=36.16*u.deg,
        obs_latitude=0.*u.deg,
        obs_velocity=0.499*u.km/u.s,
        period=11.1868*u.day,
        )

    geometry = models.Observatory(
        observer_altitude=1.3*u.pc,
        stellar_type='M',
    )

    atmosphere = models.EquilibriumAtmosphere() # This will get changed by the GCM

    generator = models.Generator(
        resolution_kernel=True,
        gas_model=True,
        continuum_model=True,
        continuum_stellar=True,
        apply_telluric_noise=True,
        apply_telluric_obs=False,
        rad_units=u.Unit('W m-2 um-1'),
        log_rad=False,
        gcm_binning=40, # Change this if you are doing real science
    )

    telescope = models.SingleTelescope(
        aperture=2*u.m,
        zodi=1.0,
        fov=5*u.arcsec,
        range1=1*u.um,
        range2=18*u.um,
        resolution=50.*resolving_power,
    )

    noise = models.CCD(
        read_noise=10*u.electron,
        dark_current=100*u.electron/u.s,
        thoughput=1.0,
        emissivity=0.1,
        temperature=35*u.K,
        exp_time=1*u.hour,
        n_frames=10,
    )








.. GENERATED FROM PYTHON SOURCE LINES 138-140

Put them all together
---------------------

.. GENERATED FROM PYTHON SOURCE LINES 140-152

.. code-block:: Python


    config = PyConfig(
        target=target,
        geometry=geometry,
        atmosphere=atmosphere,
        generator=generator,
        telescope=telescope,
        noise=noise,
        gcm=gcm
        )
    








.. GENERATED FROM PYTHON SOURCE LINES 153-157

Write the config to a file
--------------------------

This is optional. But it is nice if you want to use the GUI.

.. GENERATED FROM PYTHON SOURCE LINES 157-163

.. code-block:: Python


    try:
        config.to_file(Path(__file__).parent / 'output' / 'psg_cfg.txt')
    except NameError: # in case we are not in a notebook
        config.to_file(Path('output/psg_cfg.txt'))








.. GENERATED FROM PYTHON SOURCE LINES 164-166

Run PSG
-------

.. GENERATED FROM PYTHON SOURCE LINES 166-176

.. code-block:: Python


    psg = APICall(
        cfg=config,
        output_type='rad',
        app='globes',
    )
    result = psg()

    print(type(result))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/libpypsg/request.py:51: PUMASWarning: The aerosols require higher scattering requirements, of NMAX:1 and LMAX:80, for the selected aerosols having a max g of 0.94.
      warnings.warn(warning)
    /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/libpypsg/request.py:51: GeneratorWarning: Too many electrons per pixel (up to inf) detected in the 1.00-17.98 um spectral range. Reduce exposure time per frame to less than 0.000 seconds.
      warnings.warn(warning)
    /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/astropy/units/format/generic.py:573: UnitsWarning: 'W/m2/um' contains multiple slashes, which is discouraged by the FITS standard
      warnings.warn(
    <class 'libpypsg.request.PSGResponse'>




.. GENERATED FROM PYTHON SOURCE LINES 177-179

Plot the result
---------------

.. GENERATED FROM PYTHON SOURCE LINES 179-186

.. code-block:: Python


    fig, ax = plt.subplots(1,1)

    ax.plot(result.rad.wl,(result.rad['Proxima-Cen-b']/result.rad['Total']).to_value(u.dimensionless_unscaled)*1e6)
    ax.set_xlabel(f'Wavelength ({result.rad.wl.unit})')
    ax.set_ylabel('Flux (ppm)')




.. image-sg:: /auto_examples/images/sphx_glr_plot_exocam_002.png
   :alt: plot exocam
   :srcset: /auto_examples/images/sphx_glr_plot_exocam_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(47.097222222222214, 0.5, 'Flux (ppm)')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.532 seconds)


.. _sphx_glr_download_auto_examples_plot_exocam.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_exocam.ipynb <plot_exocam.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_exocam.py <plot_exocam.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_exocam.zip <plot_exocam.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
