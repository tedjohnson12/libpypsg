
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_rad.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_rad.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_rad.py:


Plot a rad file
===============

Get a rad file from PSG and plot it.

.. GENERATED FROM PYTHON SOURCE LINES 7-26

.. code-block:: Python


    from pathlib import Path
    import matplotlib.pyplot as plt
    import numpy as np
    import astropy.units as u

    from pypsg.cfg.config import PyConfig
    from pypsg import APICall
    from pypsg import docker
    from pypsg.cfg.base import Table

    try:
        CFG_PATH = Path(__file__).parent / 'psg_cfg.txt'
    except NameError:
        CFG_PATH = Path('psg_cfg.txt')
    
    docker.set_url_and_run()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Saved settings to /home/runner/.pypsg/settings.json
    Reloading settings...




.. GENERATED FROM PYTHON SOURCE LINES 27-29

Read the file
-------------

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: Python


    pycfg = PyConfig.from_file(CFG_PATH)








.. GENERATED FROM PYTHON SOURCE LINES 33-36

Examine the cfg
---------------
For fun

.. GENERATED FROM PYTHON SOURCE LINES 36-56

.. code-block:: Python


    print(f'This config is looking at a {pycfg.target.object.value} object')
    print(f'It is called {pycfg.target.name.value}')
    print(f'It is {pycfg.geometry.observer_altitude.value} away.')

    print(f'We will observe from {pycfg.telescope.range1.value} to {pycfg.telescope.range2.value}.')
    print(f'The dark current is {pycfg.noise.dark_current.value}. Let\'s change it.')
    x = np.linspace(1,20,10)*u.um
    y = (np.sin((x/(3*u.um)).to_value(u.dimensionless_unscaled))+1)*pycfg.noise.dark_current.value
    pycfg.noise.dark_current = Table(x,y)

    print('Now the dark current is:')
    print(pycfg.noise.dark_current.asbytes.decode('utf-8'))

    plt.plot(x,y)
    plt.xlabel(f'Wavelength ({x.unit})')
    plt.ylabel(f'Dark current ({y.unit})')






.. image-sg:: /auto_examples/images/sphx_glr_plot_rad_001.png
   :alt: plot rad
   :srcset: /auto_examples/images/sphx_glr_plot_rad_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    This config is looking at a Exoplanet object
    It is called Proxima Cen b
    It is 1.3012 pc away.
    We will observe from 1.0 um to 18.0 um.
    The dark current is 100.0 electron / s. Let's change it.
    Now the dark current is:
    132.72@1.00,186.09@3.11,198.56@5.22,164.20@7.33,99.34@9.44,34.80@11.56,1.23@13.67,14.58@15.78,68.52@17.89,137.42@20.00

    Text(38.347222222222214, 0.5, 'Dark current (electron / s)')



.. GENERATED FROM PYTHON SOURCE LINES 57-59

Run PSG
-------

.. GENERATED FROM PYTHON SOURCE LINES 59-63

.. code-block:: Python


    psg = APICall(pycfg,'rad')
    rad = psg().rad





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/pypsg/request.py:51: PUMASWarning: Modeling multiple-scattering accurately for Rayleigh would require NMAX to be at least 1 and LMAX 2.
      warnings.warn(warning)
    /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/pypsg/request.py:51: GeneratorWarning: Too many electrons per pixel (up to 4.69e+08) detected in the 1.00-17.92 um spectral range. Reduce exposure time per frame to less than 0.107 seconds.
      warnings.warn(warning)
    /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/astropy/units/format/generic.py:573: UnitsWarning: 'W/m2/um' contains multiple slashes, which is discouraged by the FITS standard
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 64-66

Read the response
-----------------

.. GENERATED FROM PYTHON SOURCE LINES 66-72

.. code-block:: Python


    wl = rad.wl
    flux = rad['Total']
    plt.plot(wl,flux)
    plt.xlabel(wl.unit)
    plt.ylabel(flux.unit)



.. image-sg:: /auto_examples/images/sphx_glr_plot_rad_002.png
   :alt: plot rad
   :srcset: /auto_examples/images/sphx_glr_plot_rad_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    Text(42.722222222222214, 0.5, 'W / (um m2)')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.956 seconds)


.. _sphx_glr_download_auto_examples_plot_rad.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_rad.ipynb <plot_rad.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_rad.py <plot_rad.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
