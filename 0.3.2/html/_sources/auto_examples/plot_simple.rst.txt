
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_simple.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_simple.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_simple.py:


``PyPSG``
=========

A Python wrapper for the Planetary Spectrum Generator.

The goal of this package is to make PSG more accessible to
new users, but still be powerfull enough that expert users
will find it usefull.

In the simplest use case, users can create a PSG config file from scratch
using the ``PyConfig`` class.

.. GENERATED FROM PYTHON SOURCE LINES 14-26

.. code-block:: Python


    # sphinx_gallery_thumbnail_path = '_static/pypsg_basic.png'

    import pypsg

    pypsg.docker.set_url_and_run()

    cfg = pypsg.cfg.PyConfig(
        target=pypsg.cfg.Target(object='Exoplanet',name='Proxima Cen b')
        )
    print(cfg.content)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Saved settings to /home/runner/.pypsg/settings.json
    Reloading settings...
    b'<OBJECT-NAME>Proxima Cen b\n<OBJECT>Exoplanet'




.. GENERATED FROM PYTHON SOURCE LINES 27-29

Get the rad file
----------------

.. GENERATED FROM PYTHON SOURCE LINES 29-35

.. code-block:: Python

    psg = pypsg.APICall(
            cfg=cfg,
            output_type='rad',
        )
    response = psg()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages/astropy/units/format/generic.py:573: UnitsWarning: 'W/sr/m2/um' contains multiple slashes, which is discouraged by the FITS standard
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 36-38

Look at the rad file
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 38-40

.. code-block:: Python

    rad = response.rad

    print(rad)



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Wave/freq     Total          Object       Reflected       Thermal    
        um    W / (sr um m2) W / (sr um m2) W / (sr um m2) W / (sr um m2)
    --------- -------------- -------------- -------------- --------------
          1.0      231.99203        231.992        231.992    1.76851e-13
          1.1      184.89523        184.895        184.895    8.59289e-12
          1.2      148.08486        148.085        148.085     2.1043e-10
          1.3      119.38777        119.388        119.388    3.05108e-09
          1.4      96.962337        96.9623        96.9623    2.93731e-08
          1.5      79.349429        79.3494        79.3494    2.04157e-07
          1.6      65.427132        65.4271        65.4271    1.09062e-06
          1.7      54.343872        54.3439        54.3439    4.69654e-06
          1.8       45.45587        45.4559        45.4559    1.69172e-05
          1.9      38.276023         38.276         38.276    5.24737e-05





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.461 seconds)


.. _sphx_glr_download_auto_examples_plot_simple.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_simple.ipynb <plot_simple.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_simple.py <plot_simple.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
